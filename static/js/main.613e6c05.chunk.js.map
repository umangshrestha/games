{"version":3,"sources":["components/box.jsx","components/board.jsx","components/message.jsx","components/refresh.jsx","components/game.js","App.js","reportWebVitals.js","index.js"],"names":["style","border","fontSize","Box","props","name","onClick","value","width","height","margin","display","gridTemplate","Board","Array","map","_","pos","fontWeight","textAlign","Message","Refresh","Game","useState","fill","board","setBoard","isPlayer","setIsPlayer","message","setMessage","boardCopy","lines","i","length","a","b","c","isWon","indexOf","nextPlayer","App","useEffect","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.613e6c05.chunk.js","sourcesContent":["import React from 'react'\n\nconst style = {\n\tborder: \"3px solid black\",\n\tfontSize: \"40px\",\n}   \n\n\n/*\nBox.jsx is the discrete unit structure of the board ui.\nIt is made a button.\nWhen its pressed it will call the function passed from porps.\n*/\nconst Box = (props) => <button name={props.name} style={style} onClick={props.onClick}> {props.value} </button>\n\nexport default Box\n","import React from 'react'\nimport Box from './box'\n\nconst style = {\n\twidth: \"250px\",\n\theight: \"250px\",\n\tmargin: \"0 auto\",\n\tdisplay: \"grid\",\n\tgridTemplate: \"repeat(3, 1fr) / repeat(3, 1fr)\",\n};\n\n\nconst Board = (props) => (\n    <div style={style}>\n    {[ ...Array(9)].map((_, pos) => <Box key={pos} name={pos} onClick={()=>props.onClick(pos)} value={props.value[pos]}/>)}\n    </div>\n)\n\n\nexport default Board","import React from 'react'\n\nconst style = {\n\twidth: \"300px\",\n\tmargin: \"0 auto\",\n\tdisplay: \"grid\",\n    fontSize: \"40px\",\n\tfontWeight: \"800\",\n\ttextAlign:'center' \n};\n\nconst Message = (props) => <h1 name={\"msg\"} style={style}>{props.value}</h1>\t\n\nexport default Message","import React from 'react'\n\nconst style = {\n\twidth: \"250px\",\n\tmargin: \"0 auto\",\n\tdisplay: \"grid\",\n    fontSize: \"40px\",\n\tfontWeight: \"800\",\n};\n\nconst Refresh = (props) => <button name={\"btn\"} style={style} onClick={props.onClick}>{props.value}</button>\n\nexport default Refresh","import React, { useState } from 'react'\nimport Board from './board'\n\nimport Message from './message'\nimport Refresh from './refresh'\n\n\n\nconst isWon = (board) => {\n    // list of postion that is winning\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    // checking each of the postition seeing if the combination is there\n    // if it does return the True\n    // else return false\n    for (let i=0; i< lines.length; i++) {\n        let [a, b, c] = lines[i];\n        //console.log(board[a] === board[b] && board[a] === board[c])\n        if (board[a]!==\"\" &&board[a] === board[b] && board[a] === board[c]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nconst Game = () => {\n    // this is for board\n    // default value for all the elemnt is \"\"\n    const [board, setBoard] = useState(Array(9).fill(\"\")); \n    // first player is \"X\"\n    // if the game is over put \"\" as player\n    const [isPlayer, setIsPlayer] = useState(\"X\");\n    const [message, setMessage] = useState(\"Click to Start\");\n  \n\n\n    const refresh  = () => {\n        setBoard(Array(9).fill(\"\")); \n        setMessage(\"Click to start\");\n        setIsPlayer(\"X\");  \n    }\n \n\n    const handleInput = (pos) => {    \n        if (isPlayer === \"\" || board[pos] !== \"\") {\n            //is the game is over don't play\n            // if the box has been clocked already then return\n            return;\n        }\n       \n        const boardCopy = [...board];\n        boardCopy[pos] = isPlayer;\n        setBoard(boardCopy); // updating board for current player  \n        \n\n        if (isWon(boardCopy)){\n            // once game is over\n            setMessage(`WON: ${isPlayer}`)\n            // since the game is over putting \"\" \n            setIsPlayer(\"\");\n            return;\n        }\n\n        if (boardCopy.indexOf(\"\")=== -1){\n            // if no more moves game is draw\n            setMessage(\"DRAW\")\n            setIsPlayer(\"\");\n        } else {\n            let nextPlayer = (isPlayer === \"X\") ? \"O\" : \"X\"\n            setIsPlayer(nextPlayer); // updating player\n            setMessage(`TURN: ${nextPlayer}`)\n        }\n    }\n\n    return (<div>\n             <Message value={message} />\n            <Board onClick={handleInput} value={board} /> \n            <Refresh onClick={refresh} value={'Refresh'} />\n        </div>)\n}\n\nexport default Game","import React, { useEffect }  from 'react'\nimport Game from './components/game' \n\nconst App = () => {\n    useEffect(() => {\n        document.title = \"tic-tac-toe\"\n    }, [])\n\n    return <Game/> \n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}